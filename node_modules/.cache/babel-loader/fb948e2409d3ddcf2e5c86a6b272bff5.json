{"ast":null,"code":"var _jsxFileName = \"/Users/macbookair/Documents/Corso Web Developer/Robofriends/robofriends/src/App.js\";\nimport React, { Component } from 'react';\nimport CardList from './CardList'; // import {robots} from './robot';\n\nimport SearchBox from './SearchBox';\nimport './App.css';\nimport Scroll from './Scroll'; // STATE é di fatto un oggetto in gradi di cambiare\n// const state = {\n// \trobots: robots,\n// \tsearchfields: ''\n// }, posso usare anche setState\n// const App = () => { \n// \treturn (\n// \t\t<div className='tc'>\n// \t\t\t<h1>RoboFriends</h1>\n// \t\t\t<SearchBox />\n// \t\t\t<CardList robots={robots} />\n// \t\t</div>\n// \t);\n// }\n// devo creare una classe per usare constructor\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    // super() mi serve per usare this.\n    // Siccome é un component é una smart app\n    super();\n\n    this.onSearchChange = event => {\n      this.setState({\n        searchfield: event.target.value\n      });\n    };\n\n    this.state = {\n      // robots: robots,\n      robots: [],\n      searchfield: ''\n    };\n  }\n\n  componentDidMount() {\n    // spiegato successivamente\n    // fetch é una chiamata di richiesta al server\n    fetch('https://jsonplaceholder.cypress.io/users').then(response => response.json()).then(users => {\n      this.setState({\n        robots: users\n      });\n    });\n  } // Quando creo un mio methods in react devo usare il seguente \n  // modo di scrivere SEMPRE\n\n\n  // render é una funzione che, sfruttando il virtual DOM, va a creare l'app\n  render() {\n    const filteredRobots = this.state.robots.filter(robots => {\n      return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase()); // Attenzione\n      // Andrebbe inserito toLowerCase()\n    }); // Se troppo lento a caricare i dati dal server\n\n    if (this.state.robots.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"tc\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tc\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"f1\",\n          children: \"RoboFriends\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n          searchChange: this.onSearchChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Scroll, {\n          children: /*#__PURE__*/_jsxDEV(CardList, {\n            robots: filteredRobots\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 6\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 4\n      }, this);\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/macbookair/Documents/Corso Web Developer/Robofriends/robofriends/src/App.js"],"names":["React","Component","CardList","SearchBox","Scroll","App","constructor","onSearchChange","event","setState","searchfield","target","value","state","robots","componentDidMount","fetch","then","response","json","users","render","filteredRobots","filter","name","toLowerCase","includes","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB,C,CAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AACA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAC3BK,EAAAA,WAAW,GAAG;AACb;AACA;AACA;;AAHa,SA2BdC,cA3Bc,GA2BIC,KAAD,IAAW;AAC3B,WAAKC,QAAL,CAAc;AAAEC,QAAAA,WAAW,EAAEF,KAAK,CAACG,MAAN,CAAaC;AAA5B,OAAd;AACA,KA7Ba;;AAIb,SAAKC,KAAL,GAAa;AACZ;AACAC,MAAAA,MAAM,EAAE,EAFI;AAGZJ,MAAAA,WAAW,EAAE;AAHD,KAAb;AAKA;;AAGFK,EAAAA,iBAAiB,GAAG;AACnB;AACA;AACAC,IAAAA,KAAK,CAAC,0CAAD,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,KAAK,IAAI;AACd,WAAKX,QAAL,CAAc;AAACK,QAAAA,MAAM,EAAEM;AAAT,OAAd;AACA,KAJD;AAKA,GArB2B,CA0B5B;AACA;;;AAKA;AACCC,EAAAA,MAAM,GAAG;AACR,UAAMC,cAAc,GAAG,KAAKT,KAAL,CAAWC,MAAX,CAAkBS,MAAlB,CAAyBT,MAAM,IAAI;AACzD,aAAOA,MAAM,CAACU,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmC,KAAKb,KAAL,CAAWH,WAAX,CAAuBe,WAAvB,EAAnC,CAAP,CADyD,CAEzD;AACA;AACA,KAJsB,CAAvB,CADQ,CAMR;;AACA,QAAI,KAAKZ,KAAL,CAAWC,MAAX,CAAkBa,MAAlB,KAA6B,CAAjC,EAAoC;AACnC,0BAAO;AAAI,QAAA,SAAS,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AACA,KAFD,MAEO;AACN,0BACA;AAAK,QAAA,SAAS,EAAC,IAAf;AAAA,gCACC;AAAI,UAAA,SAAS,EAAE,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC,QAAC,SAAD;AAAW,UAAA,YAAY,EAAE,KAAKpB;AAA9B;AAAA;AAAA;AAAA;AAAA,gBAFD,eAGC,QAAC,MAAD;AAAA,iCACC,QAAC,QAAD;AAAU,YAAA,MAAM,EAAEe;AAAlB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,gBAHD;AAAA;AAAA;AAAA;AAAA;AAAA,cADA;AASA;AACD;;AArD0B;;AAwD5B,eAAejB,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport CardList from './CardList';\n// import {robots} from './robot';\nimport SearchBox from './SearchBox';\nimport './App.css';\nimport Scroll from './Scroll'\n\n\n// STATE é di fatto un oggetto in gradi di cambiare\n// const state = {\n// \trobots: robots,\n// \tsearchfields: ''\n// }, posso usare anche setState\n\n// const App = () => { \n// \treturn (\n// \t\t<div className='tc'>\n// \t\t\t<h1>RoboFriends</h1>\n// \t\t\t<SearchBox />\n// \t\t\t<CardList robots={robots} />\n// \t\t</div>\n// \t);\n// }\n\n// devo creare una classe per usare constructor\nclass App extends Component {\n\tconstructor() {\n\t\t// super() mi serve per usare this.\n\t\t// Siccome é un component é una smart app\n\t\tsuper()\n\t\tthis.state = {\n\t\t\t// robots: robots,\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\ncomponentDidMount() {\n\t// spiegato successivamente\n\t// fetch é una chiamata di richiesta al server\n\tfetch('https://jsonplaceholder.cypress.io/users')\n\t.then(response => response.json())\n\t.then(users => {\n\t\tthis.setState({robots: users})\n\t});\n}\n\n\n\n\n// Quando creo un mio methods in react devo usare il seguente \n// modo di scrivere SEMPRE\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value})\n\t}\n\n// render é una funzione che, sfruttando il virtual DOM, va a creare l'app\n\trender() { \n\t\tconst filteredRobots = this.state.robots.filter(robots => {\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t\t// Attenzione\n\t\t\t// Andrebbe inserito toLowerCase()\n\t\t})\n\t\t// Se troppo lento a caricare i dati dal server\n\t\tif (this.state.robots.length === 0) {\n\t\t\treturn <h1 className='tc'>Loading...</h1>\n\t\t} else {\n\t\t\treturn (\n\t\t\t<div className='tc'>\n\t\t\t\t<h1 className= 'f1' >RoboFriends</h1>\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t\t}\t\n\t}\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}